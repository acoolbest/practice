!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BITMAPFILEHEADER	qr_generator.cpp	/^	} BITMAPFILEHEADER;$/;"	t	typeref:struct:__anon3	file:
BITMAPFILEHEADER	qrcode.cpp	/^} BITMAPFILEHEADER;  $/;"	t	typeref:struct:__anon1	file:
BITMAPFILEHEADER	read_bmp.cpp	/^typedef struct BITMAPFILEHEADER  $/;"	s	file:
BITMAPFILEHEADER	read_bmp.cpp	/^}BITMAPFILEHEADER;   $/;"	t	typeref:struct:BITMAPFILEHEADER	file:
BITMAPFILEHEADER::bfOffBits	read_bmp.cpp	/^    u_int32_t bfOffBits;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
BITMAPFILEHEADER::bfReserved1	read_bmp.cpp	/^    u_int16_t bfReserved1;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
BITMAPFILEHEADER::bfReserved2	read_bmp.cpp	/^    u_int16_t bfReserved2;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
BITMAPFILEHEADER::bfSize	read_bmp.cpp	/^    u_int32_t bfSize;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
BITMAPFILEHEADER::bfType	read_bmp.cpp	/^    u_int16_t bfType;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
BITMAPINFODEADER	read_bmp.cpp	/^}BITMAPINFODEADER;  $/;"	t	typeref:struct:BITMAPINFOHEADER	file:
BITMAPINFOHEADER	qr_generator.cpp	/^	} BITMAPINFOHEADER;$/;"	t	typeref:struct:__anon4	file:
BITMAPINFOHEADER	qrcode.cpp	/^} BITMAPINFOHEADER;  $/;"	t	typeref:struct:__anon2	file:
BITMAPINFOHEADER	read_bmp.cpp	/^typedef struct BITMAPINFOHEADER  $/;"	s	file:
BITMAPINFOHEADER::biBitCount	read_bmp.cpp	/^    u_int16_t biBitCount;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biClrImportant	read_bmp.cpp	/^    u_int32_t biClrImportant;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biClrUsed	read_bmp.cpp	/^    u_int32_t biClrUsed;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biCompression	read_bmp.cpp	/^    u_int32_t biCompression;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biHeight	read_bmp.cpp	/^    u_int32_t biHeight;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biPlanes	read_bmp.cpp	/^    u_int16_t biPlanes;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biSize	read_bmp.cpp	/^    u_int32_t biSize;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biSizeImage	read_bmp.cpp	/^    u_int32_t biSizeImage;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biWidth	read_bmp.cpp	/^    u_int32_t biWidth;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biXPelsPerMeter	read_bmp.cpp	/^    u_int32_t biXPelsPerMeter;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BITMAPINFOHEADER::biYPelsPerMeter	read_bmp.cpp	/^    u_int32_t biYPelsPerMeter;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
BIT_MAP_FILE_HEADER	Jinato.cpp	/^struct BIT_MAP_FILE_HEADER  $/;"	s	file:
BIT_MAP_FILE_HEADER::bfOffBits	Jinato.cpp	/^	uint32_t bfOffBits;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
BIT_MAP_FILE_HEADER::bfReserved1	Jinato.cpp	/^	uint16_t bfReserved1;$/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
BIT_MAP_FILE_HEADER::bfReserved2	Jinato.cpp	/^	uint16_t bfReserved2;$/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
BIT_MAP_FILE_HEADER::bfSize	Jinato.cpp	/^	uint32_t bfSize;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
BIT_MAP_FILE_HEADER::bfType	Jinato.cpp	/^	uint16_t bfType;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
BIT_MAP_INFO_HEADER	Jinato.cpp	/^struct BIT_MAP_INFO_HEADER  $/;"	s	file:
BIT_MAP_INFO_HEADER::biBitCount	Jinato.cpp	/^	uint16_t biBitCount;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biClrImportant	Jinato.cpp	/^	uint32_t biClrImportant;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biClrUsed	Jinato.cpp	/^	uint32_t biClrUsed;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biCompression	Jinato.cpp	/^	uint32_t biCompression;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biHeight	Jinato.cpp	/^	int32_t biHeight;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biPlanes	Jinato.cpp	/^	uint16_t biPlanes;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biSize	Jinato.cpp	/^	uint32_t biSize;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biSizeImage	Jinato.cpp	/^	uint32_t biSizeImage;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biWidth	Jinato.cpp	/^	uint32_t biWidth;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biXPelsPerMeter	Jinato.cpp	/^	uint32_t biXPelsPerMeter;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BIT_MAP_INFO_HEADER::biYPelsPerMeter	Jinato.cpp	/^	uint32_t biYPelsPerMeter;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
BI_RGB	qr_generator.cpp	53;"	d	file:
BI_RGB	qrcode.cpp	43;"	d	file:
BM	suofang1.cpp	/^	short BM;$/;"	m	struct:header	file:	access:public
BmpSetV	suofang1.cpp	/^void BmpSetV(unsigned char *bitmap,int v,unsigned char *bitmap2)$/;"	f	signature:(unsigned char *bitmap,int v,unsigned char *bitmap2)
DWORD	qr_generator.cpp	/^typedef unsigned long	DWORD;$/;"	t	file:
DWORD	qrcode.cpp	/^typedef uint32_t   DWORD;  $/;"	t	file:
LONG	qr_generator.cpp	/^typedef signed long		LONG;$/;"	t	file:
LONG	qrcode.cpp	/^typedef int32_t     LONG;  $/;"	t	file:
OUT_FILE	qr_generator.cpp	40;"	d	file:
OUT_FILE_PIXEL_PRESCALER	qr_generator.cpp	41;"	d	file:
OUT_FILE_PIXEL_PRESCALER	qrcode.cpp	15;"	d	file:
PIXEL_COLOR_B	qr_generator.cpp	45;"	d	file:
PIXEL_COLOR_B	qrcode.cpp	36;"	d	file:
PIXEL_COLOR_G	qr_generator.cpp	44;"	d	file:
PIXEL_COLOR_G	qrcode.cpp	35;"	d	file:
PIXEL_COLOR_R	qr_generator.cpp	43;"	d	file:
PIXEL_COLOR_R	qrcode.cpp	34;"	d	file:
QRCODE_TEXT	qr_generator.cpp	39;"	d	file:
QRGenerator	qrcode.cpp	/^		QRGenerator(void);  $/;"	p	class:QRGenerator	file:	access:public	signature:(void)
QRGenerator	qrcode.cpp	/^QRGenerator::QRGenerator(void)  $/;"	f	class:QRGenerator	signature:(void)
QRGenerator	qrcode.cpp	/^class QRGenerator  $/;"	c	file:
QRGenerator::QRGenerator	qrcode.cpp	/^		QRGenerator(void);  $/;"	p	class:QRGenerator	file:	access:public	signature:(void)
QRGenerator::QRGenerator	qrcode.cpp	/^QRGenerator::QRGenerator(void)  $/;"	f	class:QRGenerator	signature:(void)
QRGenerator::generate	qrcode.cpp	/^		static void generate(string& text, string& bmpSavedPath);  $/;"	p	class:QRGenerator	file:	access:public	signature:(string& text, string& bmpSavedPath)
QRGenerator::generate	qrcode.cpp	/^void QRGenerator::generate(string& text, string& bmpSavedPath)  $/;"	f	class:QRGenerator	signature:(string& text, string& bmpSavedPath)
QRGenerator::~QRGenerator	qrcode.cpp	/^		~QRGenerator(void);  $/;"	p	class:QRGenerator	file:	access:public	signature:(void)
QRGenerator::~QRGenerator	qrcode.cpp	/^QRGenerator::~QRGenerator(void)  $/;"	f	class:QRGenerator	signature:(void)
RGB_QUAD_MASK	Jinato.cpp	/^struct RGB_QUAD_MASK {$/;"	s	file:
RGB_QUAD_MASK::alpha	Jinato.cpp	/^	uint32_t alpha;		\/\/缺省为0$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
RGB_QUAD_MASK::blue_mask	Jinato.cpp	/^	uint32_t blue_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
RGB_QUAD_MASK::green_mask	Jinato.cpp	/^	uint32_t green_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
RGB_QUAD_MASK::red_mask	Jinato.cpp	/^	uint32_t red_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
WORD	qr_generator.cpp	/^typedef unsigned short	WORD;$/;"	t	file:
WORD	qrcode.cpp	/^typedef uint16_t  WORD;  $/;"	t	file:
__anon1::bfOffBits	qrcode.cpp	/^	DWORD   bfOffBits;  $/;"	m	struct:__anon1	file:	access:public
__anon1::bfReserved	qrcode.cpp	/^	DWORD   bfReserved;  $/;"	m	struct:__anon1	file:	access:public
__anon1::bfSize	qrcode.cpp	/^	DWORD   bfSize;  $/;"	m	struct:__anon1	file:	access:public
__anon1::bfType	qrcode.cpp	/^	WORD    bfType;  $/;"	m	struct:__anon1	file:	access:public
__anon2::biBitCount	qrcode.cpp	/^	WORD       biBitCount;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biClrImportant	qrcode.cpp	/^	DWORD      biClrImportant;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biClrUsed	qrcode.cpp	/^	DWORD      biClrUsed;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biCompression	qrcode.cpp	/^	DWORD      biCompression;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biHeight	qrcode.cpp	/^	LONG       biHeight;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biPlanes	qrcode.cpp	/^	WORD       biPlanes;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biSize	qrcode.cpp	/^	DWORD      biSize;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biSizeImage	qrcode.cpp	/^	DWORD      biSizeImage;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biWidth	qrcode.cpp	/^	LONG       biWidth;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biXPelsPerMeter	qrcode.cpp	/^	LONG       biXPelsPerMeter;  $/;"	m	struct:__anon2	file:	access:public
__anon2::biYPelsPerMeter	qrcode.cpp	/^	LONG       biYPelsPerMeter;  $/;"	m	struct:__anon2	file:	access:public
__anon3::bfOffBits	qr_generator.cpp	/^	DWORD   bfOffBits;$/;"	m	struct:__anon3	file:	access:public
__anon3::bfReserved1	qr_generator.cpp	/^	WORD    bfReserved1;$/;"	m	struct:__anon3	file:	access:public
__anon3::bfReserved2	qr_generator.cpp	/^	WORD    bfReserved2;$/;"	m	struct:__anon3	file:	access:public
__anon3::bfSize	qr_generator.cpp	/^	DWORD   bfSize;$/;"	m	struct:__anon3	file:	access:public
__anon3::bfType	qr_generator.cpp	/^	WORD    bfType;$/;"	m	struct:__anon3	file:	access:public
__anon4::biBitCount	qr_generator.cpp	/^	WORD       biBitCount;$/;"	m	struct:__anon4	file:	access:public
__anon4::biClrImportant	qr_generator.cpp	/^	DWORD      biClrImportant;$/;"	m	struct:__anon4	file:	access:public
__anon4::biClrUsed	qr_generator.cpp	/^	DWORD      biClrUsed;$/;"	m	struct:__anon4	file:	access:public
__anon4::biCompression	qr_generator.cpp	/^	DWORD      biCompression;$/;"	m	struct:__anon4	file:	access:public
__anon4::biHeight	qr_generator.cpp	/^	LONG       biHeight;$/;"	m	struct:__anon4	file:	access:public
__anon4::biPlanes	qr_generator.cpp	/^	WORD       biPlanes;$/;"	m	struct:__anon4	file:	access:public
__anon4::biSize	qr_generator.cpp	/^	DWORD      biSize;$/;"	m	struct:__anon4	file:	access:public
__anon4::biSizeImage	qr_generator.cpp	/^	DWORD      biSizeImage;$/;"	m	struct:__anon4	file:	access:public
__anon4::biWidth	qr_generator.cpp	/^	LONG       biWidth;$/;"	m	struct:__anon4	file:	access:public
__anon4::biXPelsPerMeter	qr_generator.cpp	/^	LONG       biXPelsPerMeter;$/;"	m	struct:__anon4	file:	access:public
__anon4::biYPelsPerMeter	qr_generator.cpp	/^	LONG       biYPelsPerMeter;$/;"	m	struct:__anon4	file:	access:public
_tmain	qr_generator.cpp	/^int _tmain(int argc, _TCHAR* argv[])$/;"	f	signature:(int argc, _TCHAR* argv[])
_tmain	suofang1.cpp	/^int _tmain(int argc, _TCHAR* argv[4000000])$/;"	f	signature:(int argc, _TCHAR* argv[4000000])
alpha	Jinato.cpp	/^	uint32_t alpha;		\/\/缺省为0$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
bfOffBits	Jinato.cpp	/^	uint32_t bfOffBits;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
bfOffBits	qr_generator.cpp	/^	DWORD   bfOffBits;$/;"	m	struct:__anon3	file:	access:public
bfOffBits	qrcode.cpp	/^	DWORD   bfOffBits;  $/;"	m	struct:__anon1	file:	access:public
bfOffBits	read_bmp.cpp	/^    u_int32_t bfOffBits;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
bfReserved	qrcode.cpp	/^	DWORD   bfReserved;  $/;"	m	struct:__anon1	file:	access:public
bfReserved1	Jinato.cpp	/^	uint16_t bfReserved1;$/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
bfReserved1	qr_generator.cpp	/^	WORD    bfReserved1;$/;"	m	struct:__anon3	file:	access:public
bfReserved1	read_bmp.cpp	/^    u_int16_t bfReserved1;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
bfReserved2	Jinato.cpp	/^	uint16_t bfReserved2;$/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
bfReserved2	qr_generator.cpp	/^	WORD    bfReserved2;$/;"	m	struct:__anon3	file:	access:public
bfReserved2	read_bmp.cpp	/^    u_int16_t bfReserved2;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
bfSize	Jinato.cpp	/^	uint32_t bfSize;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
bfSize	qr_generator.cpp	/^	DWORD   bfSize;$/;"	m	struct:__anon3	file:	access:public
bfSize	qrcode.cpp	/^	DWORD   bfSize;  $/;"	m	struct:__anon1	file:	access:public
bfSize	read_bmp.cpp	/^    u_int32_t bfSize;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
bfType	Jinato.cpp	/^	uint16_t bfType;   $/;"	m	struct:BIT_MAP_FILE_HEADER	file:	access:public
bfType	qr_generator.cpp	/^	WORD    bfType;$/;"	m	struct:__anon3	file:	access:public
bfType	qrcode.cpp	/^	WORD    bfType;  $/;"	m	struct:__anon1	file:	access:public
bfType	read_bmp.cpp	/^    u_int16_t bfType;   $/;"	m	struct:BITMAPFILEHEADER	file:	access:public
biBitCount	Jinato.cpp	/^	uint16_t biBitCount;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biBitCount	qr_generator.cpp	/^	WORD       biBitCount;$/;"	m	struct:__anon4	file:	access:public
biBitCount	qrcode.cpp	/^	WORD       biBitCount;  $/;"	m	struct:__anon2	file:	access:public
biBitCount	read_bmp.cpp	/^    u_int16_t biBitCount;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biClrImportant	Jinato.cpp	/^	uint32_t biClrImportant;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biClrImportant	qr_generator.cpp	/^	DWORD      biClrImportant;$/;"	m	struct:__anon4	file:	access:public
biClrImportant	qrcode.cpp	/^	DWORD      biClrImportant;  $/;"	m	struct:__anon2	file:	access:public
biClrImportant	read_bmp.cpp	/^    u_int32_t biClrImportant;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biClrUsed	Jinato.cpp	/^	uint32_t biClrUsed;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biClrUsed	qr_generator.cpp	/^	DWORD      biClrUsed;$/;"	m	struct:__anon4	file:	access:public
biClrUsed	qrcode.cpp	/^	DWORD      biClrUsed;  $/;"	m	struct:__anon2	file:	access:public
biClrUsed	read_bmp.cpp	/^    u_int32_t biClrUsed;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biCompression	Jinato.cpp	/^	uint32_t biCompression;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biCompression	qr_generator.cpp	/^	DWORD      biCompression;$/;"	m	struct:__anon4	file:	access:public
biCompression	qrcode.cpp	/^	DWORD      biCompression;  $/;"	m	struct:__anon2	file:	access:public
biCompression	read_bmp.cpp	/^    u_int32_t biCompression;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biHeight	Jinato.cpp	/^	int32_t biHeight;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biHeight	qr_generator.cpp	/^	LONG       biHeight;$/;"	m	struct:__anon4	file:	access:public
biHeight	qrcode.cpp	/^	LONG       biHeight;  $/;"	m	struct:__anon2	file:	access:public
biHeight	read_bmp.cpp	/^    u_int32_t biHeight;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biPlanes	Jinato.cpp	/^	uint16_t biPlanes;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biPlanes	qr_generator.cpp	/^	WORD       biPlanes;$/;"	m	struct:__anon4	file:	access:public
biPlanes	qrcode.cpp	/^	WORD       biPlanes;  $/;"	m	struct:__anon2	file:	access:public
biPlanes	read_bmp.cpp	/^    u_int16_t biPlanes;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biSize	Jinato.cpp	/^	uint32_t biSize;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biSize	qr_generator.cpp	/^	DWORD      biSize;$/;"	m	struct:__anon4	file:	access:public
biSize	qrcode.cpp	/^	DWORD      biSize;  $/;"	m	struct:__anon2	file:	access:public
biSize	read_bmp.cpp	/^    u_int32_t biSize;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biSizeImage	Jinato.cpp	/^	uint32_t biSizeImage;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biSizeImage	qr_generator.cpp	/^	DWORD      biSizeImage;$/;"	m	struct:__anon4	file:	access:public
biSizeImage	qrcode.cpp	/^	DWORD      biSizeImage;  $/;"	m	struct:__anon2	file:	access:public
biSizeImage	read_bmp.cpp	/^    u_int32_t biSizeImage;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biWidth	Jinato.cpp	/^	uint32_t biWidth;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biWidth	qr_generator.cpp	/^	LONG       biWidth;$/;"	m	struct:__anon4	file:	access:public
biWidth	qrcode.cpp	/^	LONG       biWidth;  $/;"	m	struct:__anon2	file:	access:public
biWidth	read_bmp.cpp	/^    u_int32_t biWidth;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biXPelsPerMeter	Jinato.cpp	/^	uint32_t biXPelsPerMeter;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biXPelsPerMeter	qr_generator.cpp	/^	LONG       biXPelsPerMeter;$/;"	m	struct:__anon4	file:	access:public
biXPelsPerMeter	qrcode.cpp	/^	LONG       biXPelsPerMeter;  $/;"	m	struct:__anon2	file:	access:public
biXPelsPerMeter	read_bmp.cpp	/^    u_int32_t biXPelsPerMeter;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
biYPelsPerMeter	Jinato.cpp	/^	uint32_t biYPelsPerMeter;   $/;"	m	struct:BIT_MAP_INFO_HEADER	file:	access:public
biYPelsPerMeter	qr_generator.cpp	/^	LONG       biYPelsPerMeter;$/;"	m	struct:__anon4	file:	access:public
biYPelsPerMeter	qrcode.cpp	/^	LONG       biYPelsPerMeter;  $/;"	m	struct:__anon2	file:	access:public
biYPelsPerMeter	read_bmp.cpp	/^    u_int32_t biYPelsPerMeter;   $/;"	m	struct:BITMAPINFOHEADER	file:	access:public
bitmapheader	suofang1.cpp	/^}bitmapheader;$/;"	v	typeref:struct:header
bitmapheadlong	suofang1.cpp	/^	unsigned int bitmapheadlong;$/;"	m	struct:header	file:	access:public
bitmaphight	suofang1.cpp	/^	unsigned int bitmaphight;$/;"	m	struct:header	file:	access:public
bitmappageinfo	suofang1.cpp	/^	short bitmappageinfo;$/;"	m	struct:header	file:	access:public
bitmapsize	suofang1.cpp	/^	unsigned int bitmapsize;$/;"	m	struct:header	file:	access:public
bitmapwith	suofang1.cpp	/^	unsigned int bitmapwith;$/;"	m	struct:header	file:	access:public
bitperpixel	suofang1.cpp	/^	short bitperpixel;$/;"	m	struct:header	file:	access:public
blue_mask	Jinato.cpp	/^	uint32_t blue_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
bmp_16bit_rgb565	Jinato.cpp	/^	bmp_16bit_rgb565 = 16,$/;"	e	enum:enum_bmp_bit_count	file:
bmp_24bit	Jinato.cpp	/^	bmp_24bit = 24$/;"	e	enum:enum_bmp_bit_count	file:
bmp_write	Jinato.cpp	/^bool bmp_write(QRcode * qrCode, enum_bmp_bit_count biBitCount, const char *filename, uint16_t bmp_width = 0)$/;"	f	signature:(QRcode * qrCode, enum_bmp_bit_count biBitCount, const char *filename, uint16_t bmp_width = 0)
bmpsetH	suofang1.cpp	/^void __stdcall bmpsetH(unsigned char *bitmap,int h,unsigned char *bitmap2)$/;"	f	signature:(unsigned char *bitmap,int h,unsigned char *bitmap2)
bmpzoom	suofang.cpp	/^bool bmpzoom(const char* szSrcBmp, const char* szDstBmp, double Rate)$/;"	f	signature:(const char* szSrcBmp, const char* szDstBmp, double Rate)
colourmap	suofang1.cpp	/^	unsigned int colourmap;$/;"	m	struct:header	file:	access:public
colourmapsize	suofang1.cpp	/^	unsigned int colourmapsize;$/;"	m	struct:header	file:	access:public
compress	suofang1.cpp	/^	unsigned int compress;$/;"	m	struct:header	file:	access:public
enum_bmp_bit_count	Jinato.cpp	/^enum enum_bmp_bit_count$/;"	g	file:
filesize	suofang1.cpp	/^	unsigned int filesize;$/;"	m	struct:header	file:	access:public
generate	qrcode.cpp	/^		static void generate(string& text, string& bmpSavedPath);  $/;"	p	class:QRGenerator	file:	access:public	signature:(string& text, string& bmpSavedPath)
generate	qrcode.cpp	/^void QRGenerator::generate(string& text, string& bmpSavedPath)  $/;"	f	class:QRGenerator	signature:(string& text, string& bmpSavedPath)
green_mask	Jinato.cpp	/^	uint32_t green_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
header	suofang1.cpp	/^struct header{$/;"	s	file:
header::BM	suofang1.cpp	/^	short BM;$/;"	m	struct:header	file:	access:public
header::bitmapheadlong	suofang1.cpp	/^	unsigned int bitmapheadlong;$/;"	m	struct:header	file:	access:public
header::bitmaphight	suofang1.cpp	/^	unsigned int bitmaphight;$/;"	m	struct:header	file:	access:public
header::bitmappageinfo	suofang1.cpp	/^	short bitmappageinfo;$/;"	m	struct:header	file:	access:public
header::bitmapsize	suofang1.cpp	/^	unsigned int bitmapsize;$/;"	m	struct:header	file:	access:public
header::bitmapwith	suofang1.cpp	/^	unsigned int bitmapwith;$/;"	m	struct:header	file:	access:public
header::bitperpixel	suofang1.cpp	/^	short bitperpixel;$/;"	m	struct:header	file:	access:public
header::colourmap	suofang1.cpp	/^	unsigned int colourmap;$/;"	m	struct:header	file:	access:public
header::colourmapsize	suofang1.cpp	/^	unsigned int colourmapsize;$/;"	m	struct:header	file:	access:public
header::compress	suofang1.cpp	/^	unsigned int compress;$/;"	m	struct:header	file:	access:public
header::filesize	suofang1.cpp	/^	unsigned int filesize;$/;"	m	struct:header	file:	access:public
header::levelresolution	suofang1.cpp	/^	unsigned int levelresolution;$/;"	m	struct:header	file:	access:public
header::offset	suofang1.cpp	/^	unsigned int offset;$/;"	m	struct:header	file:	access:public
header::recv	suofang1.cpp	/^	unsigned int recv;$/;"	m	struct:header	file:	access:public
header::verticalresolution	suofang1.cpp	/^	unsigned int verticalresolution;$/;"	m	struct:header	file:	access:public
levelresolution	suofang1.cpp	/^	unsigned int levelresolution;$/;"	m	struct:header	file:	access:public
main	Jinato.cpp	/^int main()  $/;"	f	signature:()
main	qrcode.cpp	/^int main()  $/;"	f	signature:()
main	read_bmp.cpp	/^int main( int argc, char **argv )  $/;"	f	signature:( int argc, char **argv )
main	suofang1.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
offset	suofang1.cpp	/^	unsigned int offset;$/;"	m	struct:header	file:	access:public
qrcode_encode	qrcode.cpp	/^void qrcode_encode(string str_url, string port_number, string logo_path)$/;"	f	signature:(string str_url, string port_number, string logo_path)
recv	suofang1.cpp	/^	unsigned int recv;$/;"	m	struct:header	file:	access:public
red_mask	Jinato.cpp	/^	uint32_t red_mask;$/;"	m	struct:RGB_QUAD_MASK	file:	access:public
scale	suofang1.cpp	/^void scale(int srcwith,int srcheight,int destwith,int destheight)$/;"	f	signature:(int srcwith,int srcheight,int destwith,int destheight)
showBmpHead	read_bmp.cpp	/^void showBmpHead(BITMAPFILEHEADER &pBmpHead){    $/;"	f	signature:(BITMAPFILEHEADER &pBmpHead)
showBmpInforHead	read_bmp.cpp	/^void showBmpInforHead(BITMAPINFODEADER &pBmpInforHead){    $/;"	f	signature:(BITMAPINFODEADER &pBmpInforHead)
verticalresolution	suofang1.cpp	/^	unsigned int verticalresolution;$/;"	m	struct:header	file:	access:public
~QRGenerator	qrcode.cpp	/^		~QRGenerator(void);  $/;"	p	class:QRGenerator	file:	access:public	signature:(void)
~QRGenerator	qrcode.cpp	/^QRGenerator::~QRGenerator(void)  $/;"	f	class:QRGenerator	signature:(void)
