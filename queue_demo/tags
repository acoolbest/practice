!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLACK	bounded_blocking_queue.h	13;"	d
BLUE	bounded_blocking_queue.h	17;"	d
BOLDBLACK	bounded_blocking_queue.h	21;"	d
BOLDBLUE	bounded_blocking_queue.h	25;"	d
BOLDCYAN	bounded_blocking_queue.h	27;"	d
BOLDGREEN	bounded_blocking_queue.h	23;"	d
BOLDMAGENTA	bounded_blocking_queue.h	26;"	d
BOLDRED	bounded_blocking_queue.h	22;"	d
BOLDWHITE	bounded_blocking_queue.h	28;"	d
BOLDYELLOW	bounded_blocking_queue.h	24;"	d
BlockingQueue	BlockingQueue.hpp	/^		BlockingQueue () : _mutex (), _condvar (), _queue ()$/;"	f	class:BlockingQueue	access:public	signature:()
BlockingQueue	BlockingQueue.hpp	/^		BlockingQueue (const BlockingQueue& rhs);$/;"	p	class:BlockingQueue	access:private	signature:(const BlockingQueue& rhs)
BlockingQueue	BlockingQueue.hpp	/^class BlockingQueue$/;"	c
BlockingQueue	list.cpp	/^    BlockingQueue ( ) $/;"	f	class:BlockingQueue	access:public	signature:( )
BlockingQueue	list.cpp	/^class BlockingQueue $/;"	c	file:
BlockingQueue::BlockingQueue	BlockingQueue.hpp	/^		BlockingQueue () : _mutex (), _condvar (), _queue ()$/;"	f	class:BlockingQueue	access:public	signature:()
BlockingQueue::BlockingQueue	BlockingQueue.hpp	/^		BlockingQueue (const BlockingQueue& rhs);$/;"	p	class:BlockingQueue	access:private	signature:(const BlockingQueue& rhs)
BlockingQueue::BlockingQueue	list.cpp	/^    BlockingQueue ( ) $/;"	f	class:BlockingQueue	access:public	signature:( )
BlockingQueue::Put	BlockingQueue.hpp	/^		void Put (const T& task)$/;"	f	class:BlockingQueue	access:public	signature:(const T& task)
BlockingQueue::Size	BlockingQueue.hpp	/^		size_t Size() const$/;"	f	class:BlockingQueue	access:public	signature:() const
BlockingQueue::Take	BlockingQueue.hpp	/^		T Take ()$/;"	f	class:BlockingQueue	access:public	signature:()
BlockingQueue::_attr	list.cpp	/^    pthread_mutexattr_t _attr;$/;"	m	class:BlockingQueue	file:	access:private
BlockingQueue::_cond	list.cpp	/^    pthread_cond_t _cond;$/;"	m	class:BlockingQueue	file:	access:private
BlockingQueue::_condvar	BlockingQueue.hpp	/^		std::condition_variable _condvar;  $/;"	m	class:BlockingQueue	access:private
BlockingQueue::_list	list.cpp	/^    list<T> _list; $/;"	m	class:BlockingQueue	file:	access:private
BlockingQueue::_lock	list.cpp	/^    pthread_mutex_t _lock;$/;"	m	class:BlockingQueue	file:	access:private
BlockingQueue::_mutex	BlockingQueue.hpp	/^		mutable std::mutex _mutex;  $/;"	m	class:BlockingQueue	access:private
BlockingQueue::_queue	BlockingQueue.hpp	/^		std::list<T> _queue;  $/;"	m	class:BlockingQueue	access:private
BlockingQueue::operator =	BlockingQueue.hpp	/^		BlockingQueue& operator = (const BlockingQueue& rhs);$/;"	p	class:BlockingQueue	access:private	signature:(const BlockingQueue& rhs)
BlockingQueue::pop	list.cpp	/^    T pop( );$/;"	p	class:BlockingQueue	file:	access:public	signature:( )
BlockingQueue::pop	list.cpp	/^    bool pop(T & out_data, const int seconds); \/\/ time-out pop$/;"	p	class:BlockingQueue	file:	access:public	signature:(T & out_data, const int seconds)
BlockingQueue::pop	list.cpp	/^T BlockingQueue<T>::pop( ) $/;"	f	class:BlockingQueue	signature:( )
BlockingQueue::pop	list.cpp	/^bool BlockingQueue <T>::pop(T & out_data, const int seconds)$/;"	f	class:BlockingQueue	signature:(T & out_data, const int seconds)
BlockingQueue::push	list.cpp	/^    void push(const T& data);$/;"	p	class:BlockingQueue	file:	access:public	signature:(const T& data)
BlockingQueue::push	list.cpp	/^    void push(const T& data, const int seconds); \/\/time-out push$/;"	p	class:BlockingQueue	file:	access:public	signature:(const T& data, const int seconds)
BlockingQueue::push	list.cpp	/^void BlockingQueue <T>::push(const T& data ) $/;"	f	class:BlockingQueue	signature:(const T& data )
BlockingQueue::push	list.cpp	/^void BlockingQueue <T>::push(const T& data, const int seconds) $/;"	f	class:BlockingQueue	signature:(const T& data, const int seconds)
BlockingQueue::~BlockingQueue	list.cpp	/^    ~BlockingQueue ( ) $/;"	f	class:BlockingQueue	access:public	signature:( )
CYAN	bounded_blocking_queue.h	19;"	d
GREEN	bounded_blocking_queue.h	15;"	d
MAGENTA	bounded_blocking_queue.h	18;"	d
Put	BlockingQueue.hpp	/^		void Put (const T& task)$/;"	f	class:BlockingQueue	access:public	signature:(const T& task)
RED	bounded_blocking_queue.h	14;"	d
RESET	bounded_blocking_queue.h	12;"	d
Size	BlockingQueue.hpp	/^		size_t Size() const$/;"	f	class:BlockingQueue	access:public	signature:() const
Take	BlockingQueue.hpp	/^		T Take ()$/;"	f	class:BlockingQueue	access:public	signature:()
WHITE	bounded_blocking_queue.h	20;"	d
YELLOW	bounded_blocking_queue.h	16;"	d
_BOUNDED_BLOCKING_QUEUE_H_	bounded_blocking_queue.h	2;"	d
_attr	list.cpp	/^    pthread_mutexattr_t _attr;$/;"	m	class:BlockingQueue	file:	access:private
_cond	list.cpp	/^    pthread_cond_t _cond;$/;"	m	class:BlockingQueue	file:	access:private
_condvar	BlockingQueue.hpp	/^		std::condition_variable _condvar;  $/;"	m	class:BlockingQueue	access:private
_list	bounded_blocking_queue.h	/^		list<T> _list;$/;"	m	class:bounded_blocking_queue	access:private
_list	list.cpp	/^    list<T> _list; $/;"	m	class:BlockingQueue	file:	access:private
_lock	list.cpp	/^    pthread_mutex_t _lock;$/;"	m	class:BlockingQueue	file:	access:private
_mutex	BlockingQueue.hpp	/^		mutable std::mutex _mutex;  $/;"	m	class:BlockingQueue	access:private
_queue	BlockingQueue.hpp	/^		std::list<T> _queue;  $/;"	m	class:BlockingQueue	access:private
_rcond	bounded_blocking_queue.h	/^		pthread_cond_t _rcond, _wcond;$/;"	m	class:bounded_blocking_queue	access:private
_rlock	bounded_blocking_queue.h	/^		pthread_mutex_t _rlock, _wlock;$/;"	m	class:bounded_blocking_queue	access:private
_wcond	bounded_blocking_queue.h	/^		pthread_cond_t _rcond, _wcond;$/;"	m	class:bounded_blocking_queue	access:private
_wlock	bounded_blocking_queue.h	/^		pthread_mutex_t _rlock, _wlock;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue	bounded_blocking_queue.h	/^		bounded_blocking_queue(unsigned int size) : max_size(size)$/;"	f	class:bounded_blocking_queue	access:public	signature:(unsigned int size)
bounded_blocking_queue	bounded_blocking_queue.h	/^class bounded_blocking_queue$/;"	c
bounded_blocking_queue::_list	bounded_blocking_queue.h	/^		list<T> _list;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::_rcond	bounded_blocking_queue.h	/^		pthread_cond_t _rcond, _wcond;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::_rlock	bounded_blocking_queue.h	/^		pthread_mutex_t _rlock, _wlock;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::_wcond	bounded_blocking_queue.h	/^		pthread_cond_t _rcond, _wcond;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::_wlock	bounded_blocking_queue.h	/^		pthread_mutex_t _rlock, _wlock;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::bounded_blocking_queue	bounded_blocking_queue.h	/^		bounded_blocking_queue(unsigned int size) : max_size(size)$/;"	f	class:bounded_blocking_queue	access:public	signature:(unsigned int size)
bounded_blocking_queue::max_size	bounded_blocking_queue.h	/^		unsigned int max_size;$/;"	m	class:bounded_blocking_queue	access:private
bounded_blocking_queue::pop	bounded_blocking_queue.h	/^		bool pop(T& data, bool & was_empty, const int seconds); \/\/ time-out pop$/;"	p	class:bounded_blocking_queue	access:public	signature:(T& data, bool & was_empty, const int seconds)
bounded_blocking_queue::pop	bounded_blocking_queue.h	/^bool bounded_blocking_queue<T>::pop(T& data, bool & was_empty, const int seconds)$/;"	f	class:bounded_blocking_queue	signature:(T& data, bool & was_empty, const int seconds)
bounded_blocking_queue::push	bounded_blocking_queue.h	/^		void push(const T& data, const int seconds);$/;"	p	class:bounded_blocking_queue	access:public	signature:(const T& data, const int seconds)
bounded_blocking_queue::push	bounded_blocking_queue.h	/^void bounded_blocking_queue<T>::push(const T& data, const int seconds)$/;"	f	class:bounded_blocking_queue	signature:(const T& data, const int seconds)
bounded_blocking_queue::~bounded_blocking_queue	bounded_blocking_queue.h	/^		~bounded_blocking_queue()$/;"	f	class:bounded_blocking_queue	access:public	signature:()
client_data	bounded_blocking_queue.cpp	/^	uint32_t client_data;$/;"	m	struct:client_recv_stru	file:	access:public
client_data	list.cpp	/^	int client_data;$/;"	m	struct:client_recv_stru	file:	access:public
client_recv_stru	bounded_blocking_queue.cpp	/^struct client_recv_stru$/;"	s	file:
client_recv_stru	list.cpp	/^struct client_recv_stru$/;"	s	file:
client_recv_stru::client_data	bounded_blocking_queue.cpp	/^	uint32_t client_data;$/;"	m	struct:client_recv_stru	file:	access:public
client_recv_stru::client_data	list.cpp	/^	int client_data;$/;"	m	struct:client_recv_stru	file:	access:public
client_recv_stru::recv_buf	bounded_blocking_queue.cpp	/^	string recv_buf;$/;"	m	struct:client_recv_stru	file:	access:public
client_recv_stru::recv_buf	list.cpp	/^	string recv_buf;$/;"	m	struct:client_recv_stru	file:	access:public
foo1	bounded_blocking_queue.cpp	/^void foo1() $/;"	f	signature:()
foo2	bounded_blocking_queue.cpp	/^void foo2() $/;"	f	signature:()
gb_pop_runing	bounded_blocking_queue.cpp	/^static bool gb_pop_runing = true;$/;"	v	file:
gb_push_runing	bounded_blocking_queue.cpp	/^static bool gb_push_runing = true;$/;"	v	file:
get_current_time	bounded_blocking_queue.h	/^static string get_current_time()$/;"	f	signature:()
main	bounded_blocking_queue.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	exception.cpp	/^int main () {$/;"	f	signature:()
main	list.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	main.cpp	/^int main (int argc, char* argv[])  $/;"	f	signature:(int argc, char* argv[])
max_size	bounded_blocking_queue.h	/^		unsigned int max_size;$/;"	m	class:bounded_blocking_queue	access:private
ooops	exception.cpp	/^struct ooops : std::exception {$/;"	s	file:	inherits:std::exception
operator =	BlockingQueue.hpp	/^		BlockingQueue& operator = (const BlockingQueue& rhs);$/;"	p	class:BlockingQueue	access:private	signature:(const BlockingQueue& rhs)
pop	bounded_blocking_queue.h	/^		bool pop(T& data, bool & was_empty, const int seconds); \/\/ time-out pop$/;"	p	class:bounded_blocking_queue	access:public	signature:(T& data, bool & was_empty, const int seconds)
pop	bounded_blocking_queue.h	/^bool bounded_blocking_queue<T>::pop(T& data, bool & was_empty, const int seconds)$/;"	f	class:bounded_blocking_queue	signature:(T& data, bool & was_empty, const int seconds)
pop	list.cpp	/^    T pop( );$/;"	p	class:BlockingQueue	file:	access:public	signature:( )
pop	list.cpp	/^    bool pop(T & out_data, const int seconds); \/\/ time-out pop$/;"	p	class:BlockingQueue	file:	access:public	signature:(T & out_data, const int seconds)
pop	list.cpp	/^T BlockingQueue<T>::pop( ) $/;"	f	class:BlockingQueue	signature:( )
pop	list.cpp	/^bool BlockingQueue <T>::pop(T & out_data, const int seconds)$/;"	f	class:BlockingQueue	signature:(T & out_data, const int seconds)
push	bounded_blocking_queue.h	/^		void push(const T& data, const int seconds);$/;"	p	class:bounded_blocking_queue	access:public	signature:(const T& data, const int seconds)
push	bounded_blocking_queue.h	/^void bounded_blocking_queue<T>::push(const T& data, const int seconds)$/;"	f	class:bounded_blocking_queue	signature:(const T& data, const int seconds)
push	list.cpp	/^    void push(const T& data);$/;"	p	class:BlockingQueue	file:	access:public	signature:(const T& data)
push	list.cpp	/^    void push(const T& data, const int seconds); \/\/time-out push$/;"	p	class:BlockingQueue	file:	access:public	signature:(const T& data, const int seconds)
push	list.cpp	/^void BlockingQueue <T>::push(const T& data ) $/;"	f	class:BlockingQueue	signature:(const T& data )
push	list.cpp	/^void BlockingQueue <T>::push(const T& data, const int seconds) $/;"	f	class:BlockingQueue	signature:(const T& data, const int seconds)
recv_buf	bounded_blocking_queue.cpp	/^	string recv_buf;$/;"	m	struct:client_recv_stru	file:	access:public
recv_buf	list.cpp	/^	string recv_buf;$/;"	m	struct:client_recv_stru	file:	access:public
~BlockingQueue	list.cpp	/^    ~BlockingQueue ( ) $/;"	f	class:BlockingQueue	access:public	signature:( )
~bounded_blocking_queue	bounded_blocking_queue.h	/^		~bounded_blocking_queue()$/;"	f	class:bounded_blocking_queue	access:public	signature:()
